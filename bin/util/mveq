#!/bin/bash
set -euo pipefail

err=
create_parents=
alt_rename=

while [ "$#" -gt 0 ] && [ "${1:0:1}" == '-' ]; do
    arg="$1"
    shift
    if [ "$arg" == '--' ]; then
        break
    elif [ "$arg" == '-p' ] || [ "$arg" == '--parents' ]; then
        create_parents=y
    elif [ "$arg" == '-a' ] || [ "$arg" == '--alt-rename' ]; then
        alt_rename=y
    else
        printf 'Error: Unrecognized argument %s\n' "$arg" >&2
        err=y
    fi
done

if [ -n "$err" ] || [ "$#" -lt 2 ]; then
    printf 'Usage: %s [OPTIONS] SOURCE... DEST

Moves each SOURCE file to DEST.
If any SOURCE already exists in DEST, verifies that the two have the same contents, and removes SOURCE.
If the contents do not match, emits an error and does not remove SOURCE.

If more than one SOURCE is provided, DEST must be a directory.
If exactly one SOURCE is provided, DEST does not end with /, and DEST is not a directory, DEST will be treated as a target filename.

Options:
-p | --parents     Create the parent directories of DEST automatically
-a | --alt-rename  If a SOURCE exists in DEST, and does not match, additionally checks alternate filenames and moves under a new alternate filename if none match.
' "$0" >&2
    exit 1
fi

# TODO support -r/--recursive

generate_filenames_for_move() {
    local file="$1"
    local stub="${file%.*}"
    local ext="${file##*.}"
    if [ "$ext" == "$file" ]; then
        ext=
    else
        ext=".$ext"
    fi
    echo "$file"
    [ -z "$alt_rename" ] && return
    for i in $(seq 0 50); do
        echo "$stub.alt.$i$ext"
    done
}

generate_filenames_for_match() {
    local file="$1"
    local stub="${file%.*}"
    local ext="${file##*.}"
    if [ "$ext" == "$file" ]; then
        ext=
    else
        ext=".$ext"
    fi
    echo "$file"
    [ -z "$alt_rename" ] && return
    echo "$stub.alt$ext"
    [ -n "$ext" ] && echo "$stub$ext.alt"
    for i in $(seq 0 50); do
        echo "$stub.alt.$i$ext"
        echo "$stub.$i.alt$ext"
        if [ -n "$ext" ]; then
            echo "$stub$ext.alt.$i"
            echo "$stub$ext.$i.alt"
        fi
    done
}

dest="${@:$#}"

for src in "${@:1:$(($#-1))}"; do
    if [ "$#" -eq 2 ] && [ "$dest" == "${dest%/}" ] && ! [ -d "$dest" ]; then
        destfiletmpl="$dest"
    else
        filename="${src##*/}"
        destfiletmpl="${dest%/}/$filename"
    fi
    found=
    while IFS='\n' read destfile; do
        if [ -f "$destfile" ]; then
            if [ "$(realpath "$src")" == "$(realpath "$destfile")" ]; then
                printf 'Warning: %s and %s point to the same file! (skipping)\n' "$src" "$destfile" >&2
                found=y
                break
            fi
            srchash="$(sha256sum "$src" | cut -c1-64)"
            desthash="$(sha256sum "$destfile" | cut -c1-64)"
            if [ "$srchash" == "$desthash" ]; then
                found=y
                rm "$src"
                break
            fi
        fi
    done < <( generate_filenames_for_match "$destfiletmpl" )
    if [ -n "$found" ]; then
        continue
    fi
    moved=
    while IFS='\n' read destfile; do
        [ -f "$destfile" ] && continue
        if [ -n "$create_parents" ] && ! [ -e "$(dirname "$destfile")" ]; then
            mkdir -p "$(dirname "$destfile")"
            rsync -a --remove-source-files "$src" "$destfile"
        elif [ -d "$(dirname "$destfile")" ]; then
            rsync -a --remove-source-files "$src" "$destfile"
        else
            printf 'Error: %s is not a directory!\n' "$(dirname "$destfile")" >&2
            exit 1
        fi
        moved=y
        break
    done < <( generate_filenames_for_move "$destfiletmpl" )
    if [ -z "$moved" ]; then
        printf 'Error: Unable to find suitable destination for %s\n' "$src" >&2
    fi
done
