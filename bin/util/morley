#!/usr/bin/env python3

import argparse
from pathlib import Path
import sys
from typing import Any


def _info(msg: str) -> None:
    print(msg, file=sys.stderr)


def _morley(file: Path, *, dry_run: bool) -> None:
    if not file.is_symlink():
        return
    target = file.readlink()
    resolved = file.parent.joinpath(target)
    absolute = resolved.absolute()
    if target != absolute:
        assert file.resolve() == absolute.resolve()
        _info(f"Converting {file} from relative symlink ({target}) to absolute ({absolute})")
        if not dry_run:
            file.unlink()
            file.symlink_to(absolute)


def _parse_args() -> Any:
    parser = argparse.ArgumentParser(
        description=(
            "If FILE is a relative symbolic link, it will be replaced with an absolute symbolic"
            " link to the same target. Symbolic links are NOT recursively evaluated."
        ),
    )
    parser.add_argument('file', nargs='+')
    parser.add_argument('--dry-run', action='store_true', default=False)
    return parser.parse_args()


def main() -> None:
    args = _parse_args()
    dry_run = args.dry_run
    for file in args.file:
        _morley(Path(file), dry_run=dry_run)


if __name__ == '__main__':
    main()
