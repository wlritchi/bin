#!/bin/bash
set -euo pipefail

print_diff() {
    if command -v colordiff >/dev/null 2>&1; then
        colordiff "$@" || true
    else
        diff "$@" || true
    fi
}

get_permissions() {
    if stat --version 2>/dev/null | grep -q GNU; then
        stat -c '%a' "$1" # GNU coreutils
    else
        stat -f '%A' "$1" # macOS, BSD
    fi
}

sync_dir() {
    local parent="${1%/*}"
    if [ "$parent" != "$1" ]; then
        sync_dir "$parent" || return 1
    fi
    if [ -d "$HOME/$1" ]; then
        if [ -L "$HOME/$1" ]; then
            target="$(realpath "$HOME/$1")"
            wlr-warn "update: $HOME/$1 is a directory symlink to $target"
            if wlr-ask "Replace with directory and copy contents of original target?"; then
                rm "$HOME/$1"
                cp -rp "$target" "$HOME/$1"
                return
            fi
            return 1
        fi
    elif [ -e "$HOME/$1" ]; then
        wlr-warn "update: $HOME/$1 exists, but is not a directory"
        return 1
    else
        mkdir -p "$HOME/$1"
    fi
}

link_file() {
    if [ -L "$HOME/$1" ]; then
        expected_target="$(realpath "$WLR_ENV_PATH/dotfiles/$1")"
        actual_target="$(realpath "$HOME/$1")"
        if [ "$expected_target" != "$actual_target" ]; then
            print_diff "$HOME/$1" "$WLR_ENV_PATH/dotfiles/$1"
            if wlr-ask "Update symlink $HOME/$1 to point to $WLR_ENV_PATH/dotfiles/$1 (currently $actual_target)?"; then
                ln -sf "$WLR_ENV_PATH/dotfiles/$1" "$HOME/$1"
            fi
        fi
    elif [ -f "$HOME/$1" ]; then
        print_diff "$HOME/$1" "$WLR_ENV_PATH/dotfiles/$1"
        if wlr-ask "Replace $HOME/$1 with a symlink to $WLR_ENV_PATH/dotfiles/$1?"; then
            ln -sf "$WLR_ENV_PATH/dotfiles/$1" "$HOME/$1"
        fi
    elif [ -e "$HOME/$1" ]; then
        wlr-warn "update: $HOME/$1 exists, but is not a regular file or symlink"
        return 1
    else
        ln -s "$(realpath "$WLR_ENV_PATH/dotfiles/$1")" "$HOME/$1"
    fi
}

while IFS= read filename <&3; do
    relative="${filename#"$WLR_ENV_PATH/dotfiles/"}"
    if [ "$relative" == "$filename" ]; then
        wlr-warn "update: failed to match filename $filename against expected subdirectory"
        continue
    fi
    dir="${relative%/*}"
    if [ "$dir" != "$relative" ]; then
        sync_dir "$dir" || continue
    fi
    link_file "$relative"
done 3< <( find -L "$WLR_ENV_PATH/dotfiles" -type f 2>/dev/null || true )
